@startuml
class EmployeeController {
    + sendCheckInRequest(int, HttpSession) : ResponseEntity<Integer>
}

class User {
}

class UserReceiveMessageDTO {
    - userId : int
    - gymDepartmentId : int
}

class DepartmentNotificationDTO {
    - departmentName : String
    - departmentLogoUrl : String
}

class UserDetail {
    - userDetailId : int
    - firstName : String
    - lastName : String
}

class Notification {
    - orderDetailId : int
    - userIdSend : int
    - userIdReceive : int
    - messageType : String
    - message : String
    - departmentId : int
    - departmentName : String
    - departmentLogoUrl : String
    - timeSend : Timestamp
    + builder() : NotificationBuilder
}

class NotificationBuilder {
    + orderDetailId(int) : NotificationBuilder
    + userIdSend(int) : NotificationBuilder
    + userIdReceive(int) : NotificationBuilder
    + messageType(String) : NotificationBuilder
    + message(String) : NotificationBuilder
    + departmentId(int) : NotificationBuilder
    + departmentName(String) : NotificationBuilder
    + departmentLogoUrl(String) : NotificationBuilder
    + timeSend(Timestamp) : NotificationBuilder
    + build() : Notification
}

interface EmployeeService {
    + getUserReceiveMessage(int) : UserReceiveMessageDTO
}

interface DepartmentService {
    + getDepartmentNotificationDtoById(int) : DepartmentNotificationDTO
}

interface UserService {
    + getUserDetailByUserDetailId(int) : UserDetail
}

interface NotificationService {
    + insertNotification(Notification) : int
}

interface WebSocketService {
    + notifyUser(int, Notification) : void
}

EmployeeController ..> User : <<uses>>
EmployeeController ..> UserReceiveMessageDTO : <<uses>>
EmployeeController ..> DepartmentNotificationDTO : <<uses>>
EmployeeController ..> UserDetail : <<uses>>
EmployeeController ..> Notification : <<uses>>
EmployeeController ..> NotificationBuilder : <<uses>>
EmployeeController ..> EmployeeService : <<uses>>
EmployeeController ..> DepartmentService : <<uses>>
EmployeeController ..> UserService : <<uses>>
EmployeeController ..> NotificationService : <<uses>>
EmployeeController ..> WebSocketService : <<uses>>

EmployeeService ..> UserReceiveMessageDTO : <<creates>>
DepartmentService ..> DepartmentNotificationDTO : <<creates>>
UserService ..> UserDetail : <<creates>>
NotificationService ..> Notification : <<uses>>
WebSocketService ..> Notification : <<uses>>

@enduml